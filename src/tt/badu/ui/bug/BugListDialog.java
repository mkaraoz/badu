package tt.badu.ui.bug;

import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.table.DefaultTableModel;
import core.reporter.Vulnerability;
import core.db.Database;
import core.reporter.enums.Domain;
import core.reporter.enums.Severity;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import tt.badu.ui.master.MasterCallback;
import tt.badu.ui.master.UpdateCallback;

/**
 *
 * @author mk
 */
public class BugListDialog extends javax.swing.JDialog {

    private final MasterCallback masterCallback;
    private final UpdateCallback updateCallback;
    private final List<Vulnerability> vulnList;
    private final Map<Vulnerability, Boolean> tagMap = new HashMap<>();

    /**
     * Creates new form BugListDialog
     */
    public BugListDialog(java.awt.Frame parent, boolean modal, List<Vulnerability> selectedVulns) {
        super(parent, modal);
        initComponents();
        
        this.vulnList = Database.init().selectAll();
        for (Vulnerability v : vulnList) {
            tagMap.put(v, false);
        }
        for(Vulnerability v : selectedVulns) {
            Vulnerability local = getVulnFromTitle(v.getTitle());
            if(local == null) continue; // for manual bugs local will be null
            local.setSeverity(v.getSeverity());
            tagMap.put(local, true);
        }
        
        init();
        jtBugTable.getModel().addTableModelListener(new CheckBoxModelListener());
        this.masterCallback = (MasterCallback) parent;
        this.updateCallback = (UpdateCallback) parent;       
        setLocationRelativeTo(parent);
        setData(vulnList);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jbOkButton = new javax.swing.JButton();
        jbCancelButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtBugTable = new javax.swing.JTable();
        cbWeb = new javax.swing.JCheckBox();
        cbMobil = new javax.swing.JCheckBox();
        cbServis = new javax.swing.JCheckBox();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ACİL", "KRİTİK", "YÜKSEK", "ORTA", "DÜŞÜK" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Zafiyet Listesi");

        jbOkButton.setText("OK");
        jbOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOkButtonActionPerformed(evt);
            }
        });

        jbCancelButton.setText("CANCEL");
        jbCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelButtonActionPerformed(evt);
            }
        });

        jtBugTable.getTableHeader().setFont(new Font("Dialog", Font.BOLD, 15));
        jtBugTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "X", "Zafiyet", "Seviye", "Kategori", "Domain"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtBugTable.setColumnSelectionAllowed(true);
        jtBugTable.setRowHeight(25);
        jScrollPane2.setViewportView(jtBugTable);
        jtBugTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jtBugTable.getColumnModel().getColumnCount() > 0) {
            jtBugTable.getColumnModel().getColumn(0).setMinWidth(50);
            jtBugTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            jtBugTable.getColumnModel().getColumn(0).setMaxWidth(50);
            jtBugTable.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(jComboBox1));
        }

        cbWeb.setSelected(true);
        cbWeb.setText("Web");
        cbWeb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbWebItemStateChanged(evt);
            }
        });

        cbMobil.setSelected(true);
        cbMobil.setText("Mobil");
        cbMobil.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbMobilItemStateChanged(evt);
            }
        });

        cbServis.setSelected(true);
        cbServis.setText("Servis");
        cbServis.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbServisItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbWeb)
                .addGap(74, 74, 74)
                .addComponent(cbMobil)
                .addGap(58, 58, 58)
                .addComponent(cbServis)
                .addGap(172, 172, 172)
                .addComponent(jbCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 875, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbWeb)
                    .addComponent(cbMobil)
                    .addComponent(cbServis))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOkButtonActionPerformed
        List<Vulnerability> selectedVulns = new ArrayList<>();
        for(Map.Entry<Vulnerability, Boolean> entry : tagMap.entrySet()) {
            if(entry.getValue()) {
                selectedVulns.add(entry.getKey());
            }
        }
        Collections.sort(selectedVulns, new Comparator<Vulnerability>() {
            @Override
            public int compare(Vulnerability v1, Vulnerability v2) {
                return v1.getTitle().compareTo(v2.getTitle());
            }
        });
        masterCallback.updateVulnerabilities(selectedVulns);
        this.dispose();
    }//GEN-LAST:event_jbOkButtonActionPerformed

    private void jbCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_jbCancelButtonActionPerformed

    private void cbWebItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbWebItemStateChanged
        updateTable();
    }//GEN-LAST:event_cbWebItemStateChanged

    private void cbMobilItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbMobilItemStateChanged
        updateTable();
    }//GEN-LAST:event_cbMobilItemStateChanged

    private void cbServisItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbServisItemStateChanged
        updateTable();
    }//GEN-LAST:event_cbServisItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbMobil;
    private javax.swing.JCheckBox cbServis;
    private javax.swing.JCheckBox cbWeb;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbCancelButton;
    private javax.swing.JButton jbOkButton;
    private javax.swing.JTable jtBugTable;
    // End of variables declaration//GEN-END:variables

    private void setData(List<Vulnerability> list) {
        DefaultTableModel model = (DefaultTableModel) jtBugTable.getModel();
        for (int i = 0; i < list.size(); i++) {
            Vulnerability vul = list.get(i);
            boolean t = tagMap.get(vul);
            model.addRow(new Object[]{
                t, // checkbox
                vul.getTitle(), // bug name
                vul.getSeverity().getName(), // severity
                vul.getCategory().getName(),
                vul.getDomain().getName()
            });
        }
    }

    private void init() {
        ZebraRenderer zebra = new ZebraRenderer();
        jtBugTable.setDefaultRenderer(Object.class, zebra);

        TableColumnModel columnModel = jtBugTable.getColumnModel();
        columnModel.getColumn(1).setPreferredWidth(250);
        columnModel.getColumn(2).setPreferredWidth(25);
        columnModel.getColumn(3).setPreferredWidth(125);
        columnModel.getColumn(4).setPreferredWidth(25);

        jtBugTable.getTableHeader().addMouseListener(new MouseAdapter() {
            int counter = 0;

            @Override
            public void mouseClicked(MouseEvent e) {
                int col = jtBugTable.columnAtPoint(e.getPoint());
                String name = jtBugTable.getColumnName(col);

                TableRowSorter<TableModel> sorter = new TableRowSorter<>(jtBugTable.getModel());
                jtBugTable.setRowSorter(sorter);

                List<RowSorter.SortKey> sortKeys = new ArrayList<>();
                if (counter % 2 == 0) {
                    sortKeys.add(new RowSorter.SortKey(col, SortOrder.ASCENDING));
                } else {
                    sortKeys.add(new RowSorter.SortKey(col, SortOrder.DESCENDING));
                }
                counter++;
                sorter.setSortKeys(sortKeys);
            }
        });
    }

    private void updateTable() {
        emptyTable();

        List<Vulnerability> temp = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) jtBugTable.getModel();
        for (Vulnerability v : vulnList) {
            Domain d = v.getDomain();
            if ((d == Domain.WEB && cbWeb.isSelected())
                    || (d == Domain.MOBILE && cbMobil.isSelected())
                    || (d == Domain.SERVICE && cbServis.isSelected())) {
                temp.add(v);
            }
        }
        setData(temp);
    }

    private static enum DisplayCategory {
        ALL, WEB, MOBIL, SERVICE;
    }

    private Vulnerability getVulnFromTitle(final String title) {
        for (Vulnerability v : vulnList) {
            if (v.getTitle().equals(title)) {
                return v;
            }
        }
        return null;
    }

    private void emptyTable() {
        DefaultTableModel model = (DefaultTableModel) jtBugTable.getModel();
        int rowCount = model.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }

    private class CheckBoxModelListener implements TableModelListener {

        private static final int BOOLEAN_COLUMN = 0;
        private static final int SEVERITY_COLUMN = 2;

        @Override
        public void tableChanged(TableModelEvent e) {
            int row = e.getFirstRow();
            int column = e.getColumn();
            if (column == BOOLEAN_COLUMN) {
                TableModel model = (TableModel) e.getSource(); 
                Boolean checked = (Boolean) model.getValueAt(row, column);
                Vulnerability v = getVulnFromTitle(model.getValueAt(row, 1).toString());
                if (checked) {
                    tagMap.put(v, true);
                    updateCallback.update("Bulgu Eklendi: " + v.getTitle());
                } else {
                    tagMap.put(v, false);
                    updateCallback.update("Bulgu Silindi: " + v.getTitle());
                }
            }
            else if(column == SEVERITY_COLUMN) {
                TableModel model = (TableModel) e.getSource();
                String severityText = (String) model.getValueAt(row, column);
                Vulnerability v = getVulnFromTitle(model.getValueAt(row, 1).toString());
                v.setSeverity(Severity.get(severityText));
                updateCallback.update(v.getTitle() + " buldusu kritiklik değeri " + severityText + " olarak değiştirildi.");
            }
        }
    }
}
